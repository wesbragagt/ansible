---
- name: Copy flake.nix for customization
  copy:
    src: "{{ playbook_dir }}/flake.nix"
    dest: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    backup: yes
  when: flake_dest is defined
  tags: ['nix', 'install']

- name: Replace git username in flake.nix
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: 'userName = "wesbragagt";'
    replace: 'userName = "{{ git_user_name }}";'
  tags: ['nix', 'install']

- name: Replace git user email in flake.nix
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: 'userEmail = "wesbragagt@gmail.com";'
    replace: 'userEmail = "{{ git_user_email }}";'
  tags: ['nix', 'install']

- name: Replace username in homeConfigurations
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: '"wesbragagt@'
    replace: '"{{ nix_user_name }}@'
  tags: ['nix', 'install']

- name: Replace username in configuration blocks
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: 'username = "wesbragagt";'
    replace: 'username = "{{ nix_user_name }}";'
  tags: ['nix', 'install']

- name: Replace home directory paths
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: 'homeDirectory = "/Users/wesbragagt";'
    replace: 'homeDirectory = "{{ nix_home_directory }}";'
  when: ansible_system == 'Darwin'
  tags: ['nix', 'install']

- name: Replace home directory paths for Linux
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: 'homeDirectory = "/home/wesbragagt";'
    replace: 'homeDirectory = "{{ nix_home_directory }}";'
  when: ansible_system != 'Darwin'
  tags: ['nix', 'install']

- name: Replace darwin user configuration
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: 'users\.users\.wesbragagt'
    replace: 'users.users.{{ nix_user_name }}'
  tags: ['nix', 'install']

- name: Replace darwin home-manager user
  replace:
    path: "{{ playbook_dir }}/{{ flake_dest | default('flake.nix') }}"
    regexp: 'home-manager\.users\.wesbragagt'
    replace: 'home-manager.users.{{ nix_user_name }}'
  tags: ['nix', 'install']

- name: Install Nix using Determinate Systems installer
  block:
    - name: Check if Nix is already installed
      stat:
        path: /nix/store
      register: nix_installed

    - name: Download and install Nix (multi-user)
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install --no-confirm
      when: not nix_installed.stat.exists
      become: True

    - name: Source Nix profile for current session
      shell: |
        if [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
          source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
        fi
      args:
        executable: /bin/bash

- name: Detect system architecture and OS
  set_fact:
    nix_system: "{{ ansible_architecture | replace('x86_64', 'x86_64') | replace('aarch64', 'aarch64') | replace('arm64', 'aarch64') }}"
    nix_os: "{{ 'darwin' if ansible_system == 'Darwin' else 'linux' }}"

- name: Set Nix flake target
  set_fact:
    nix_flake_target: "{{ nix_user_name }}@{{ nix_os }}-{{ nix_system }}"

- name: Display detected system information
  debug:
    msg: |
      Detected system: {{ ansible_system }}
      Architecture: {{ ansible_architecture }}
      Nix target: {{ nix_flake_target }}



- name: Run Nix home-manager activation
  shell: |
    # Source Nix profile (try both multi-user and single-user paths)
    if [ -f /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh ]; then
      source /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
    elif [ -f ~/.nix-profile/etc/profile.d/nix.sh ]; then
      source ~/.nix-profile/etc/profile.d/nix.sh
    fi
    nix run .#homeConfigurations.{{ nix_flake_target }}.activationPackage
  args:
    executable: /bin/bash
    chdir: "{{ playbook_dir }}"
  environment:
    PATH: "/nix/var/nix/profiles/default/bin:~/.nix-profile/bin:{{ ansible_env.PATH }}"

- name: Display setup completion message
  debug:
    msg: |
      Nix setup completed successfully!
      System: {{ nix_flake_target }}
      
      Your development environment is now managed by Nix.
      All tools from your Ansible setup are now available via the Nix flake.
      
      To activate the environment manually in the future:
      nix run .#homeConfigurations.{{ nix_flake_target }}.activationPackage
