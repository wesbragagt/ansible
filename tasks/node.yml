- name: Load OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "vars/os_{{ ansible_facts['distribution'] }}.yml"
    - "vars/os_defaults.yml"
  tags: &tags_for_node_tasks ["install", "node"]

- name: Install Node.js packages (macOS)
  community.general.homebrew:
    name: "{{ node_packages }}"
    state: "{{ package_manager_state }}"
  retries: 3
  become: True
  become_user: "{{ ansible_user_id }}"
  tags: *tags_for_node_tasks
  when: ansible_distribution == "MacOSX"

- name: Install Node.js packages (Arch Linux)
  community.general.pacman:
    name: "{{ node_packages }}"
    state: "{{ package_manager_state }}"
    update_cache: "{{ package_manager_update_cache }}"
    extra_args: "--ask 4"  # Automatically answer yes to conflicts
  retries: 3
  become: True
  tags: *tags_for_node_tasks
  when: ansible_distribution == "Archlinux"

- name: Install Node.js packages (Fedora)
  ansible.builtin.dnf:
    name: "{{ node_packages }}"
    state: "{{ package_manager_state }}"
    update_cache: "{{ package_manager_update_cache }}"
  retries: 3
  become: True
  tags: *tags_for_node_tasks
  when: ansible_distribution == "Fedora"

- name: Install Node.js packages (Ubuntu/LinuxMint)
  ansible.builtin.apt:
    name: "{{ node_packages }}"
    state: "{{ package_manager_state }}"
    update_cache: "{{ package_manager_update_cache }}"
  retries: 3
  become: True
  tags: *tags_for_node_tasks
  when: ansible_distribution in ["Ubuntu", "LinuxMint"]

- name: Install fnm via package manager (macOS)
  community.general.homebrew:
    name: fnm
    state: "{{ package_manager_state }}"
  become: True
  become_user: "{{ ansible_user_id }}"
  tags: *tags_for_node_tasks
  when: fnm_install_method == "package" and ansible_distribution == "MacOSX"

- name: Install fnm dependencies (Arch Linux)
  community.general.pacman:
    name: unzip
    state: present
  become: True
  tags: *tags_for_node_tasks
  when: fnm_install_method == "curl" and ansible_distribution == "Archlinux"

- name: Install fnm via curl (Arch Linux)
  shell: "curl -fsSL https://fnm.vercel.app/install | bash"
  tags: *tags_for_node_tasks
  become: True
  become_user: "{{ ansible_user_id }}"
  when: fnm_install_method == "curl" and ansible_distribution == "Archlinux"

- name: Install fnm via curl (Fedora)
  shell: "{{ fnm_install_command }}"
  tags: *tags_for_node_tasks
  become: True
  become_user: "{{ ansible_user_id }}"
  when: fnm_install_method == "curl" and ansible_distribution == "Fedora"

- name: Install fnm via curl (Ubuntu/LinuxMint)
  shell: "{{ fnm_install_command }}"
  tags: *tags_for_node_tasks
  become: True
  become_user: "{{ ansible_user_id }}"
  when: fnm_install_method == "curl" and ansible_distribution in ["Ubuntu", "LinuxMint"]

- name: Check npm folder
  ignore_errors: True
  tags: *tags_for_node_tasks
  register: npm_folder_check
  stat:
    path: ~/.npm_global

- name: Create npm folder
  ignore_errors: True
  when: not npm_folder_check.stat.exists
  file:
    path: ~/.npm_global
    state: directory
    mode: '0755'
  tags: *tags_for_node_tasks

- name: Fix npm cache ownership
  ignore_errors: True
  shell: chown -R {{ ansible_user_id }}:{{ ansible_user_gid }} /home/{{ ansible_user_id }}/.npm
  become: True
  tags: *tags_for_node_tasks

- name: Ensure npm global bin directory exists
  ignore_errors: True
  file:
    path: ~/.npm_global/bin
    state: directory
    mode: '0755'
  tags: *tags_for_node_tasks

- name: Set NPM prefix
  ignore_errors: True
  shell: npm config set prefix ~/.npm_global
  tags: *tags_for_node_tasks

